// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkLogSet {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum LogLevel {
    ERROR(0),
    DEBUG(1);

    final int index;

    private LogLevel(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LogSetting {
    private @Nullable String fileName;

    public @Nullable String getFileName() {
      return fileName;
    }

    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @Nullable String filePath;

    public @Nullable String getFilePath() {
      return filePath;
    }

    public void setFilePath(@Nullable String setterArg) {
      this.filePath = setterArg;
    }

    private @Nullable Long days;

    public @Nullable Long getDays() {
      return days;
    }

    public void setDays(@Nullable Long setterArg) {
      this.days = setterArg;
    }

    private @Nullable Boolean enable;

    public @Nullable Boolean getEnable() {
      return enable;
    }

    public void setEnable(@Nullable Boolean setterArg) {
      this.enable = setterArg;
    }

    private @Nullable LogLevel level;

    public @Nullable LogLevel getLevel() {
      return level;
    }

    public void setLevel(@Nullable LogLevel setterArg) {
      this.level = setterArg;
    }

    public static final class Builder {

      private @Nullable String fileName;

      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }

      private @Nullable String filePath;

      public @NonNull Builder setFilePath(@Nullable String setterArg) {
        this.filePath = setterArg;
        return this;
      }

      private @Nullable Long days;

      public @NonNull Builder setDays(@Nullable Long setterArg) {
        this.days = setterArg;
        return this;
      }

      private @Nullable Boolean enable;

      public @NonNull Builder setEnable(@Nullable Boolean setterArg) {
        this.enable = setterArg;
        return this;
      }

      private @Nullable LogLevel level;

      public @NonNull Builder setLevel(@Nullable LogLevel setterArg) {
        this.level = setterArg;
        return this;
      }

      public @NonNull LogSetting build() {
        LogSetting pigeonReturn = new LogSetting();
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setFilePath(filePath);
        pigeonReturn.setDays(days);
        pigeonReturn.setEnable(enable);
        pigeonReturn.setLevel(level);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(fileName);
      toListResult.add(filePath);
      toListResult.add(days);
      toListResult.add(enable);
      toListResult.add(level == null ? null : level.index);
      return toListResult;
    }

    static @NonNull LogSetting fromList(@NonNull ArrayList<Object> list) {
      LogSetting pigeonResult = new LogSetting();
      Object fileName = list.get(0);
      pigeonResult.setFileName((String) fileName);
      Object filePath = list.get(1);
      pigeonResult.setFilePath((String) filePath);
      Object days = list.get(2);
      pigeonResult.setDays((days == null) ? null : ((days instanceof Integer) ? (Integer) days : (Long) days));
      Object enable = list.get(3);
      pigeonResult.setEnable((Boolean) enable);
      Object level = list.get(4);
      pigeonResult.setLevel(level == null ? null : LogLevel.values()[(int) level]);
      return pigeonResult;
    }
  }

  private static class POSLinkLogSetApiCodec extends StandardMessageCodec {
    public static final POSLinkLogSetApiCodec INSTANCE = new POSLinkLogSetApiCodec();

    private POSLinkLogSetApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return LogSetting.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof LogSetting) {
        stream.write(128);
        writeValue(stream, ((LogSetting) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkLogSetApi {

    void setLogSetting(@NonNull LogSetting logSetting);

    /** The codec used by POSLinkLogSetApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkLogSetApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkLogSetApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkLogSetApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkLogSetApi.setLogSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LogSetting logSettingArg = (LogSetting) args.get(0);
                try {
                  api.setLogSetting(logSettingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
