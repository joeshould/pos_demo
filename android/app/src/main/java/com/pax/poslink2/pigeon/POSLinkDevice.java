// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkDevice {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicWriteReq {
    private @Nullable String password;

    public @Nullable String getPassword() {
      return password;
    }

    public void setPassword(@Nullable String setterArg) {
      this.password = setterArg;
    }

    private @Nullable String passwordType;

    public @Nullable String getPasswordType() {
      return passwordType;
    }

    public void setPasswordType(@Nullable String setterArg) {
      this.passwordType = setterArg;
    }

    private @Nullable String blockNumber;

    public @Nullable String getBlockNumber() {
      return blockNumber;
    }

    public void setBlockNumber(@Nullable String setterArg) {
      this.blockNumber = setterArg;
    }

    private @Nullable String blockValue;

    public @Nullable String getBlockValue() {
      return blockValue;
    }

    public void setBlockValue(@Nullable String setterArg) {
      this.blockValue = setterArg;
    }

    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    public static final class Builder {

      private @Nullable String password;

      public @NonNull Builder setPassword(@Nullable String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable String passwordType;

      public @NonNull Builder setPasswordType(@Nullable String setterArg) {
        this.passwordType = setterArg;
        return this;
      }

      private @Nullable String blockNumber;

      public @NonNull Builder setBlockNumber(@Nullable String setterArg) {
        this.blockNumber = setterArg;
        return this;
      }

      private @Nullable String blockValue;

      public @NonNull Builder setBlockValue(@Nullable String setterArg) {
        this.blockValue = setterArg;
        return this;
      }

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicWriteReq build() {
        DeviceMifareClassicWriteReq pigeonReturn = new DeviceMifareClassicWriteReq();
        pigeonReturn.setPassword(password);
        pigeonReturn.setPasswordType(passwordType);
        pigeonReturn.setBlockNumber(blockNumber);
        pigeonReturn.setBlockValue(blockValue);
        pigeonReturn.setTimeout(timeout);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(password);
      toListResult.add(passwordType);
      toListResult.add(blockNumber);
      toListResult.add(blockValue);
      toListResult.add(timeout);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicWriteReq fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicWriteReq pigeonResult = new DeviceMifareClassicWriteReq();
      Object password = list.get(0);
      pigeonResult.setPassword((String) password);
      Object passwordType = list.get(1);
      pigeonResult.setPasswordType((String) passwordType);
      Object blockNumber = list.get(2);
      pigeonResult.setBlockNumber((String) blockNumber);
      Object blockValue = list.get(3);
      pigeonResult.setBlockValue((String) blockValue);
      Object timeout = list.get(4);
      pigeonResult.setTimeout((String) timeout);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicGetUIDReq {
    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    public static final class Builder {

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicGetUIDReq build() {
        DeviceMifareClassicGetUIDReq pigeonReturn = new DeviceMifareClassicGetUIDReq();
        pigeonReturn.setTimeout(timeout);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(timeout);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicGetUIDReq fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicGetUIDReq pigeonResult = new DeviceMifareClassicGetUIDReq();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((String) timeout);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicReadReq {
    private @Nullable String password;

    public @Nullable String getPassword() {
      return password;
    }

    public void setPassword(@Nullable String setterArg) {
      this.password = setterArg;
    }

    private @Nullable String passwordType;

    public @Nullable String getPasswordType() {
      return passwordType;
    }

    public void setPasswordType(@Nullable String setterArg) {
      this.passwordType = setterArg;
    }

    private @Nullable String blockNumber;

    public @Nullable String getBlockNumber() {
      return blockNumber;
    }

    public void setBlockNumber(@Nullable String setterArg) {
      this.blockNumber = setterArg;
    }

    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    public static final class Builder {

      private @Nullable String password;

      public @NonNull Builder setPassword(@Nullable String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable String passwordType;

      public @NonNull Builder setPasswordType(@Nullable String setterArg) {
        this.passwordType = setterArg;
        return this;
      }

      private @Nullable String blockNumber;

      public @NonNull Builder setBlockNumber(@Nullable String setterArg) {
        this.blockNumber = setterArg;
        return this;
      }

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicReadReq build() {
        DeviceMifareClassicReadReq pigeonReturn = new DeviceMifareClassicReadReq();
        pigeonReturn.setPassword(password);
        pigeonReturn.setPasswordType(passwordType);
        pigeonReturn.setBlockNumber(blockNumber);
        pigeonReturn.setTimeout(timeout);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(password);
      toListResult.add(passwordType);
      toListResult.add(blockNumber);
      toListResult.add(timeout);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicReadReq fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicReadReq pigeonResult = new DeviceMifareClassicReadReq();
      Object password = list.get(0);
      pigeonResult.setPassword((String) password);
      Object passwordType = list.get(1);
      pigeonResult.setPasswordType((String) passwordType);
      Object blockNumber = list.get(2);
      pigeonResult.setBlockNumber((String) blockNumber);
      Object timeout = list.get(3);
      pigeonResult.setTimeout((String) timeout);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicReadRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String blockValue;

    public @Nullable String getBlockValue() {
      return blockValue;
    }

    public void setBlockValue(@Nullable String setterArg) {
      this.blockValue = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String blockValue;

      public @NonNull Builder setBlockValue(@Nullable String setterArg) {
        this.blockValue = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicReadRsp build() {
        DeviceMifareClassicReadRsp pigeonReturn = new DeviceMifareClassicReadRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setBlockValue(blockValue);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(blockValue);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicReadRsp fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicReadRsp pigeonResult = new DeviceMifareClassicReadRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object blockValue = list.get(2);
      pigeonResult.setBlockValue((String) blockValue);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicWriteRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicWriteRsp build() {
        DeviceMifareClassicWriteRsp pigeonReturn = new DeviceMifareClassicWriteRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicWriteRsp fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicWriteRsp pigeonResult = new DeviceMifareClassicWriteRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceMifareClassicGetUIDRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String uid;

    public @Nullable String getUid() {
      return uid;
    }

    public void setUid(@Nullable String setterArg) {
      this.uid = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String uid;

      public @NonNull Builder setUid(@Nullable String setterArg) {
        this.uid = setterArg;
        return this;
      }

      public @NonNull DeviceMifareClassicGetUIDRsp build() {
        DeviceMifareClassicGetUIDRsp pigeonReturn = new DeviceMifareClassicGetUIDRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setUid(uid);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(uid);
      return toListResult;
    }

    static @NonNull DeviceMifareClassicGetUIDRsp fromList(@NonNull ArrayList<Object> list) {
      DeviceMifareClassicGetUIDRsp pigeonResult = new DeviceMifareClassicGetUIDRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object uid = list.get(2);
      pigeonResult.setUid((String) uid);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class POSLinkDeviceApiCodec extends StandardMessageCodec {
    public static final POSLinkDeviceApiCodec INSTANCE = new POSLinkDeviceApiCodec();

    private POSLinkDeviceApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DeviceMifareClassicGetUIDReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DeviceMifareClassicGetUIDRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DeviceMifareClassicReadReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DeviceMifareClassicReadRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return DeviceMifareClassicWriteReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return DeviceMifareClassicWriteRsp.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DeviceMifareClassicGetUIDReq) {
        stream.write(128);
        writeValue(stream, ((DeviceMifareClassicGetUIDReq) value).toList());
      } else if (value instanceof DeviceMifareClassicGetUIDRsp) {
        stream.write(129);
        writeValue(stream, ((DeviceMifareClassicGetUIDRsp) value).toList());
      } else if (value instanceof DeviceMifareClassicReadReq) {
        stream.write(130);
        writeValue(stream, ((DeviceMifareClassicReadReq) value).toList());
      } else if (value instanceof DeviceMifareClassicReadRsp) {
        stream.write(131);
        writeValue(stream, ((DeviceMifareClassicReadRsp) value).toList());
      } else if (value instanceof DeviceMifareClassicWriteReq) {
        stream.write(132);
        writeValue(stream, ((DeviceMifareClassicWriteReq) value).toList());
      } else if (value instanceof DeviceMifareClassicWriteRsp) {
        stream.write(133);
        writeValue(stream, ((DeviceMifareClassicWriteRsp) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkDeviceApi {

    void mifareClassicRead(@NonNull DeviceMifareClassicReadReq req, @NonNull Result<DeviceMifareClassicReadRsp> result);

    void mifareClassicGetUID(@NonNull DeviceMifareClassicGetUIDReq req, @NonNull Result<DeviceMifareClassicGetUIDRsp> result);

    void mifareClassicWrite(@NonNull DeviceMifareClassicWriteReq req, @NonNull Result<DeviceMifareClassicWriteRsp> result);

    /** The codec used by POSLinkDeviceApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkDeviceApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkDeviceApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkDeviceApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkDeviceApi.mifareClassicRead", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DeviceMifareClassicReadReq reqArg = (DeviceMifareClassicReadReq) args.get(0);
                Result<DeviceMifareClassicReadRsp> resultCallback =
                    new Result<DeviceMifareClassicReadRsp>() {
                      public void success(DeviceMifareClassicReadRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.mifareClassicRead(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkDeviceApi.mifareClassicGetUID", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DeviceMifareClassicGetUIDReq reqArg = (DeviceMifareClassicGetUIDReq) args.get(0);
                Result<DeviceMifareClassicGetUIDRsp> resultCallback =
                    new Result<DeviceMifareClassicGetUIDRsp>() {
                      public void success(DeviceMifareClassicGetUIDRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.mifareClassicGetUID(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkDeviceApi.mifareClassicWrite", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DeviceMifareClassicWriteReq reqArg = (DeviceMifareClassicWriteReq) args.get(0);
                Result<DeviceMifareClassicWriteRsp> resultCallback =
                    new Result<DeviceMifareClassicWriteRsp>() {
                      public void success(DeviceMifareClassicWriteRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.mifareClassicWrite(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
