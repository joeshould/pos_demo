// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkReport {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum ReportCardType {
    NOT_SET(0),
    VISA(1),
    MASTER_CARD(2),
    AMEX(3),
    DISCOVER(4),
    DINER_CLUB(5),
    CUP(6),
    MAESTRO(7),
    OTHER(8);

    final int index;

    private ReportCardType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetTransactionInfoReq {
    private @Nullable String registerReferenceNumber;

    public @Nullable String getRegisterReferenceNumber() {
      return registerReferenceNumber;
    }

    public void setRegisterReferenceNumber(@Nullable String setterArg) {
      this.registerReferenceNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable String registerReferenceNumber;

      public @NonNull Builder setRegisterReferenceNumber(@Nullable String setterArg) {
        this.registerReferenceNumber = setterArg;
        return this;
      }

      public @NonNull ReportGetTransactionInfoReq build() {
        ReportGetTransactionInfoReq pigeonReturn = new ReportGetTransactionInfoReq();
        pigeonReturn.setRegisterReferenceNumber(registerReferenceNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(registerReferenceNumber);
      return toListResult;
    }

    static @NonNull ReportGetTransactionInfoReq fromList(@NonNull ArrayList<Object> list) {
      ReportGetTransactionInfoReq pigeonResult = new ReportGetTransactionInfoReq();
      Object registerReferenceNumber = list.get(0);
      pigeonResult.setRegisterReferenceNumber((String) registerReferenceNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetCardStatusReq {
    private @Nullable String classID;

    public @Nullable String getClassID() {
      return classID;
    }

    public void setClassID(@Nullable String setterArg) {
      this.classID = setterArg;
    }

    public static final class Builder {

      private @Nullable String classID;

      public @NonNull Builder setClassID(@Nullable String setterArg) {
        this.classID = setterArg;
        return this;
      }

      public @NonNull ReportGetCardStatusReq build() {
        ReportGetCardStatusReq pigeonReturn = new ReportGetCardStatusReq();
        pigeonReturn.setClassID(classID);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(classID);
      return toListResult;
    }

    static @NonNull ReportGetCardStatusReq fromList(@NonNull ArrayList<Object> list) {
      ReportGetCardStatusReq pigeonResult = new ReportGetCardStatusReq();
      Object classID = list.get(0);
      pigeonResult.setClassID((String) classID);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetTraceInfoByCardReq {
    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String transactionAmount;

    public @Nullable String getTransactionAmount() {
      return transactionAmount;
    }

    public void setTransactionAmount(@Nullable String setterArg) {
      this.transactionAmount = setterArg;
    }

    public static final class Builder {

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String transactionAmount;

      public @NonNull Builder setTransactionAmount(@Nullable String setterArg) {
        this.transactionAmount = setterArg;
        return this;
      }

      public @NonNull ReportGetTraceInfoByCardReq build() {
        ReportGetTraceInfoByCardReq pigeonReturn = new ReportGetTraceInfoByCardReq();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setTransactionAmount(transactionAmount);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(timeout);
      toListResult.add(transactionAmount);
      return toListResult;
    }

    static @NonNull ReportGetTraceInfoByCardReq fromList(@NonNull ArrayList<Object> list) {
      ReportGetTraceInfoByCardReq pigeonResult = new ReportGetTraceInfoByCardReq();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((String) timeout);
      Object transactionAmount = list.get(1);
      pigeonResult.setTransactionAmount((String) transactionAmount);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetCardInfoReq {
    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    public static final class Builder {

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      public @NonNull ReportGetCardInfoReq build() {
        ReportGetCardInfoReq pigeonReturn = new ReportGetCardInfoReq();
        pigeonReturn.setTimeout(timeout);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(timeout);
      return toListResult;
    }

    static @NonNull ReportGetCardInfoReq fromList(@NonNull ArrayList<Object> list) {
      ReportGetCardInfoReq pigeonResult = new ReportGetCardInfoReq();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((String) timeout);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportAccountRsp {
    private @Nullable String expireDate;

    public @Nullable String getExpireDate() {
      return expireDate;
    }

    public void setExpireDate(@Nullable String setterArg) {
      this.expireDate = setterArg;
    }

    private @Nullable ReportCardType cardType;

    public @Nullable ReportCardType getCardType() {
      return cardType;
    }

    public void setCardType(@Nullable ReportCardType setterArg) {
      this.cardType = setterArg;
    }

    private @Nullable String cardTypeName;

    public @Nullable String getCardTypeName() {
      return cardTypeName;
    }

    public void setCardTypeName(@Nullable String setterArg) {
      this.cardTypeName = setterArg;
    }

    public static final class Builder {

      private @Nullable String expireDate;

      public @NonNull Builder setExpireDate(@Nullable String setterArg) {
        this.expireDate = setterArg;
        return this;
      }

      private @Nullable ReportCardType cardType;

      public @NonNull Builder setCardType(@Nullable ReportCardType setterArg) {
        this.cardType = setterArg;
        return this;
      }

      private @Nullable String cardTypeName;

      public @NonNull Builder setCardTypeName(@Nullable String setterArg) {
        this.cardTypeName = setterArg;
        return this;
      }

      public @NonNull ReportAccountRsp build() {
        ReportAccountRsp pigeonReturn = new ReportAccountRsp();
        pigeonReturn.setExpireDate(expireDate);
        pigeonReturn.setCardType(cardType);
        pigeonReturn.setCardTypeName(cardTypeName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(expireDate);
      toListResult.add(cardType == null ? null : cardType.index);
      toListResult.add(cardTypeName);
      return toListResult;
    }

    static @NonNull ReportAccountRsp fromList(@NonNull ArrayList<Object> list) {
      ReportAccountRsp pigeonResult = new ReportAccountRsp();
      Object expireDate = list.get(0);
      pigeonResult.setExpireDate((String) expireDate);
      Object cardType = list.get(1);
      pigeonResult.setCardType(cardType == null ? null : ReportCardType.values()[(int) cardType]);
      Object cardTypeName = list.get(2);
      pigeonResult.setCardTypeName((String) cardTypeName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetCardInfoRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    private @Nullable ReportAccountRsp accountInformation;

    public @Nullable ReportAccountRsp getAccountInformation() {
      return accountInformation;
    }

    public void setAccountInformation(@Nullable ReportAccountRsp setterArg) {
      this.accountInformation = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable ReportAccountRsp accountInformation;

      public @NonNull Builder setAccountInformation(@Nullable ReportAccountRsp setterArg) {
        this.accountInformation = setterArg;
        return this;
      }

      public @NonNull ReportGetCardInfoRsp build() {
        ReportGetCardInfoRsp pigeonReturn = new ReportGetCardInfoRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setAccount(account);
        pigeonReturn.setAccountInformation(accountInformation);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(account);
      toListResult.add((accountInformation == null) ? null : accountInformation.toList());
      return toListResult;
    }

    static @NonNull ReportGetCardInfoRsp fromList(@NonNull ArrayList<Object> list) {
      ReportGetCardInfoRsp pigeonResult = new ReportGetCardInfoRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object account = list.get(2);
      pigeonResult.setAccount((String) account);
      Object accountInformation = list.get(3);
      pigeonResult.setAccountInformation((accountInformation == null) ? null : ReportAccountRsp.fromList((ArrayList<Object>) accountInformation));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportTraceInfo {
    private @Nullable String registerReferenceNumber;

    public @Nullable String getRegisterReferenceNumber() {
      return registerReferenceNumber;
    }

    public void setRegisterReferenceNumber(@Nullable String setterArg) {
      this.registerReferenceNumber = setterArg;
    }

    private @Nullable String hostReferenceNumber;

    public @Nullable String getHostReferenceNumber() {
      return hostReferenceNumber;
    }

    public void setHostReferenceNumber(@Nullable String setterArg) {
      this.hostReferenceNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable String registerReferenceNumber;

      public @NonNull Builder setRegisterReferenceNumber(@Nullable String setterArg) {
        this.registerReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String hostReferenceNumber;

      public @NonNull Builder setHostReferenceNumber(@Nullable String setterArg) {
        this.hostReferenceNumber = setterArg;
        return this;
      }

      public @NonNull ReportTraceInfo build() {
        ReportTraceInfo pigeonReturn = new ReportTraceInfo();
        pigeonReturn.setRegisterReferenceNumber(registerReferenceNumber);
        pigeonReturn.setHostReferenceNumber(hostReferenceNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(registerReferenceNumber);
      toListResult.add(hostReferenceNumber);
      return toListResult;
    }

    static @NonNull ReportTraceInfo fromList(@NonNull ArrayList<Object> list) {
      ReportTraceInfo pigeonResult = new ReportTraceInfo();
      Object registerReferenceNumber = list.get(0);
      pigeonResult.setRegisterReferenceNumber((String) registerReferenceNumber);
      Object hostReferenceNumber = list.get(1);
      pigeonResult.setHostReferenceNumber((String) hostReferenceNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetTraceInfoByCardRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable List<ReportTraceInfo> traceInfo;

    public @Nullable List<ReportTraceInfo> getTraceInfo() {
      return traceInfo;
    }

    public void setTraceInfo(@Nullable List<ReportTraceInfo> setterArg) {
      this.traceInfo = setterArg;
    }

    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable List<ReportTraceInfo> traceInfo;

      public @NonNull Builder setTraceInfo(@Nullable List<ReportTraceInfo> setterArg) {
        this.traceInfo = setterArg;
        return this;
      }

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      public @NonNull ReportGetTraceInfoByCardRsp build() {
        ReportGetTraceInfoByCardRsp pigeonReturn = new ReportGetTraceInfoByCardRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setTraceInfo(traceInfo);
        pigeonReturn.setAccount(account);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(traceInfo);
      toListResult.add(account);
      return toListResult;
    }

    static @NonNull ReportGetTraceInfoByCardRsp fromList(@NonNull ArrayList<Object> list) {
      ReportGetTraceInfoByCardRsp pigeonResult = new ReportGetTraceInfoByCardRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object traceInfo = list.get(2);
      pigeonResult.setTraceInfo((List<ReportTraceInfo>) traceInfo);
      Object account = list.get(3);
      pigeonResult.setAccount((String) account);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetCardStatusRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String cardType;

    public @Nullable String getCardType() {
      return cardType;
    }

    public void setCardType(@Nullable String setterArg) {
      this.cardType = setterArg;
    }

    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    private @Nullable ReportAccountRsp accountInformation;

    public @Nullable ReportAccountRsp getAccountInformation() {
      return accountInformation;
    }

    public void setAccountInformation(@Nullable ReportAccountRsp setterArg) {
      this.accountInformation = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String cardType;

      public @NonNull Builder setCardType(@Nullable String setterArg) {
        this.cardType = setterArg;
        return this;
      }

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable ReportAccountRsp accountInformation;

      public @NonNull Builder setAccountInformation(@Nullable ReportAccountRsp setterArg) {
        this.accountInformation = setterArg;
        return this;
      }

      public @NonNull ReportGetCardStatusRsp build() {
        ReportGetCardStatusRsp pigeonReturn = new ReportGetCardStatusRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setCardType(cardType);
        pigeonReturn.setAccount(account);
        pigeonReturn.setAccountInformation(accountInformation);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(cardType);
      toListResult.add(account);
      toListResult.add((accountInformation == null) ? null : accountInformation.toList());
      return toListResult;
    }

    static @NonNull ReportGetCardStatusRsp fromList(@NonNull ArrayList<Object> list) {
      ReportGetCardStatusRsp pigeonResult = new ReportGetCardStatusRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object cardType = list.get(2);
      pigeonResult.setCardType((String) cardType);
      Object account = list.get(3);
      pigeonResult.setAccount((String) account);
      Object accountInformation = list.get(4);
      pigeonResult.setAccountInformation((accountInformation == null) ? null : ReportAccountRsp.fromList((ArrayList<Object>) accountInformation));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReportGetTransactionInfoRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String status;

    public @Nullable String getStatus() {
      return status;
    }

    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable String hostData;

    public @Nullable String getHostData() {
      return hostData;
    }

    public void setHostData(@Nullable String setterArg) {
      this.hostData = setterArg;
    }

    private @Nullable String hostReferenceNumber;

    public @Nullable String getHostReferenceNumber() {
      return hostReferenceNumber;
    }

    public void setHostReferenceNumber(@Nullable String setterArg) {
      this.hostReferenceNumber = setterArg;
    }

    private @Nullable String timeStamp;

    public @Nullable String getTimeStamp() {
      return timeStamp;
    }

    public void setTimeStamp(@Nullable String setterArg) {
      this.timeStamp = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String status;

      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }

      private @Nullable String hostData;

      public @NonNull Builder setHostData(@Nullable String setterArg) {
        this.hostData = setterArg;
        return this;
      }

      private @Nullable String hostReferenceNumber;

      public @NonNull Builder setHostReferenceNumber(@Nullable String setterArg) {
        this.hostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String timeStamp;

      public @NonNull Builder setTimeStamp(@Nullable String setterArg) {
        this.timeStamp = setterArg;
        return this;
      }

      public @NonNull ReportGetTransactionInfoRsp build() {
        ReportGetTransactionInfoRsp pigeonReturn = new ReportGetTransactionInfoRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setStatus(status);
        pigeonReturn.setHostData(hostData);
        pigeonReturn.setHostReferenceNumber(hostReferenceNumber);
        pigeonReturn.setTimeStamp(timeStamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(status);
      toListResult.add(hostData);
      toListResult.add(hostReferenceNumber);
      toListResult.add(timeStamp);
      return toListResult;
    }

    static @NonNull ReportGetTransactionInfoRsp fromList(@NonNull ArrayList<Object> list) {
      ReportGetTransactionInfoRsp pigeonResult = new ReportGetTransactionInfoRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object status = list.get(2);
      pigeonResult.setStatus((String) status);
      Object hostData = list.get(3);
      pigeonResult.setHostData((String) hostData);
      Object hostReferenceNumber = list.get(4);
      pigeonResult.setHostReferenceNumber((String) hostReferenceNumber);
      Object timeStamp = list.get(5);
      pigeonResult.setTimeStamp((String) timeStamp);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class POSLinkReportApiCodec extends StandardMessageCodec {
    public static final POSLinkReportApiCodec INSTANCE = new POSLinkReportApiCodec();

    private POSLinkReportApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ReportAccountRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ReportGetCardInfoReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ReportGetCardInfoRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ReportGetCardStatusReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ReportGetCardStatusRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ReportGetTraceInfoByCardReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ReportGetTraceInfoByCardRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return ReportGetTransactionInfoReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return ReportGetTransactionInfoRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return ReportTraceInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ReportAccountRsp) {
        stream.write(128);
        writeValue(stream, ((ReportAccountRsp) value).toList());
      } else if (value instanceof ReportGetCardInfoReq) {
        stream.write(129);
        writeValue(stream, ((ReportGetCardInfoReq) value).toList());
      } else if (value instanceof ReportGetCardInfoRsp) {
        stream.write(130);
        writeValue(stream, ((ReportGetCardInfoRsp) value).toList());
      } else if (value instanceof ReportGetCardStatusReq) {
        stream.write(131);
        writeValue(stream, ((ReportGetCardStatusReq) value).toList());
      } else if (value instanceof ReportGetCardStatusRsp) {
        stream.write(132);
        writeValue(stream, ((ReportGetCardStatusRsp) value).toList());
      } else if (value instanceof ReportGetTraceInfoByCardReq) {
        stream.write(133);
        writeValue(stream, ((ReportGetTraceInfoByCardReq) value).toList());
      } else if (value instanceof ReportGetTraceInfoByCardRsp) {
        stream.write(134);
        writeValue(stream, ((ReportGetTraceInfoByCardRsp) value).toList());
      } else if (value instanceof ReportGetTransactionInfoReq) {
        stream.write(135);
        writeValue(stream, ((ReportGetTransactionInfoReq) value).toList());
      } else if (value instanceof ReportGetTransactionInfoRsp) {
        stream.write(136);
        writeValue(stream, ((ReportGetTransactionInfoRsp) value).toList());
      } else if (value instanceof ReportTraceInfo) {
        stream.write(137);
        writeValue(stream, ((ReportTraceInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkReportApi {

    void getCardInfo(@NonNull ReportGetCardInfoReq req, @NonNull Result<ReportGetCardInfoRsp> result);

    void getTraceInfoByCard(@NonNull ReportGetTraceInfoByCardReq req, @NonNull Result<ReportGetTraceInfoByCardRsp> result);

    void getCardStatus(@NonNull ReportGetCardStatusReq req, @NonNull Result<ReportGetCardStatusRsp> result);

    void getTransactionInfo(@NonNull ReportGetTransactionInfoReq req, @NonNull Result<ReportGetTransactionInfoRsp> result);

    /** The codec used by POSLinkReportApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkReportApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkReportApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkReportApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkReportApi.getCardInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReportGetCardInfoReq reqArg = (ReportGetCardInfoReq) args.get(0);
                Result<ReportGetCardInfoRsp> resultCallback =
                    new Result<ReportGetCardInfoRsp>() {
                      public void success(ReportGetCardInfoRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCardInfo(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkReportApi.getTraceInfoByCard", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReportGetTraceInfoByCardReq reqArg = (ReportGetTraceInfoByCardReq) args.get(0);
                Result<ReportGetTraceInfoByCardRsp> resultCallback =
                    new Result<ReportGetTraceInfoByCardRsp>() {
                      public void success(ReportGetTraceInfoByCardRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getTraceInfoByCard(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkReportApi.getCardStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReportGetCardStatusReq reqArg = (ReportGetCardStatusReq) args.get(0);
                Result<ReportGetCardStatusRsp> resultCallback =
                    new Result<ReportGetCardStatusRsp>() {
                      public void success(ReportGetCardStatusRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCardStatus(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkReportApi.getTransactionInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReportGetTransactionInfoReq reqArg = (ReportGetTransactionInfoReq) args.get(0);
                Result<ReportGetTransactionInfoRsp> resultCallback =
                    new Result<ReportGetTransactionInfoRsp>() {
                      public void success(ReportGetTransactionInfoRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getTransactionInfo(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
