// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkForm {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FormInputTextReq {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String prompt;

    public @Nullable String getPrompt() {
      return prompt;
    }

    public void setPrompt(@Nullable String setterArg) {
      this.prompt = setterArg;
    }

    private @Nullable String inputType;

    public @Nullable String getInputType() {
      return inputType;
    }

    public void setInputType(@Nullable String setterArg) {
      this.inputType = setterArg;
    }

    private @Nullable String timeout;

    public @Nullable String getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable String setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String minLength;

    public @Nullable String getMinLength() {
      return minLength;
    }

    public void setMinLength(@Nullable String setterArg) {
      this.minLength = setterArg;
    }

    private @Nullable String maxLength;

    public @Nullable String getMaxLength() {
      return maxLength;
    }

    public void setMaxLength(@Nullable String setterArg) {
      this.maxLength = setterArg;
    }

    public static final class Builder {

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String prompt;

      public @NonNull Builder setPrompt(@Nullable String setterArg) {
        this.prompt = setterArg;
        return this;
      }

      private @Nullable String inputType;

      public @NonNull Builder setInputType(@Nullable String setterArg) {
        this.inputType = setterArg;
        return this;
      }

      private @Nullable String timeout;

      public @NonNull Builder setTimeout(@Nullable String setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String minLength;

      public @NonNull Builder setMinLength(@Nullable String setterArg) {
        this.minLength = setterArg;
        return this;
      }

      private @Nullable String maxLength;

      public @NonNull Builder setMaxLength(@Nullable String setterArg) {
        this.maxLength = setterArg;
        return this;
      }

      public @NonNull FormInputTextReq build() {
        FormInputTextReq pigeonReturn = new FormInputTextReq();
        pigeonReturn.setTitle(title);
        pigeonReturn.setPrompt(prompt);
        pigeonReturn.setInputType(inputType);
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setMinLength(minLength);
        pigeonReturn.setMaxLength(maxLength);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(title);
      toListResult.add(prompt);
      toListResult.add(inputType);
      toListResult.add(timeout);
      toListResult.add(minLength);
      toListResult.add(maxLength);
      return toListResult;
    }

    static @NonNull FormInputTextReq fromList(@NonNull ArrayList<Object> list) {
      FormInputTextReq pigeonResult = new FormInputTextReq();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object prompt = list.get(1);
      pigeonResult.setPrompt((String) prompt);
      Object inputType = list.get(2);
      pigeonResult.setInputType((String) inputType);
      Object timeout = list.get(3);
      pigeonResult.setTimeout((String) timeout);
      Object minLength = list.get(4);
      pigeonResult.setMinLength((String) minLength);
      Object maxLength = list.get(5);
      pigeonResult.setMaxLength((String) maxLength);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FormInputTextRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String inputText;

    public @Nullable String getInputText() {
      return inputText;
    }

    public void setInputText(@Nullable String setterArg) {
      this.inputText = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String inputText;

      public @NonNull Builder setInputText(@Nullable String setterArg) {
        this.inputText = setterArg;
        return this;
      }

      public @NonNull FormInputTextRsp build() {
        FormInputTextRsp pigeonReturn = new FormInputTextRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setInputText(inputText);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(inputText);
      return toListResult;
    }

    static @NonNull FormInputTextRsp fromList(@NonNull ArrayList<Object> list) {
      FormInputTextRsp pigeonResult = new FormInputTextRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object inputText = list.get(2);
      pigeonResult.setInputText((String) inputText);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class POSLinkFormApiCodec extends StandardMessageCodec {
    public static final POSLinkFormApiCodec INSTANCE = new POSLinkFormApiCodec();

    private POSLinkFormApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return FormInputTextReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return FormInputTextRsp.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof FormInputTextReq) {
        stream.write(128);
        writeValue(stream, ((FormInputTextReq) value).toList());
      } else if (value instanceof FormInputTextRsp) {
        stream.write(129);
        writeValue(stream, ((FormInputTextRsp) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkFormApi {

    void inputText(@NonNull FormInputTextReq req, @NonNull Result<FormInputTextRsp> result);

    /** The codec used by POSLinkFormApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkFormApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkFormApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkFormApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkFormApi.inputText", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FormInputTextReq reqArg = (FormInputTextReq) args.get(0);
                Result<FormInputTextRsp> resultCallback =
                    new Result<FormInputTextRsp>() {
                      public void success(FormInputTextRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.inputText(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
