// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkSet {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TCPSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String ip;

    public @Nullable String getIp() {
      return ip;
    }

    public void setIp(@Nullable String setterArg) {
      this.ip = setterArg;
    }

    private @Nullable String port;

    public @Nullable String getPort() {
      return port;
    }

    public void setPort(@Nullable String setterArg) {
      this.port = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String ip;

      public @NonNull Builder setIp(@Nullable String setterArg) {
        this.ip = setterArg;
        return this;
      }

      private @Nullable String port;

      public @NonNull Builder setPort(@Nullable String setterArg) {
        this.port = setterArg;
        return this;
      }

      public @NonNull TCPSetting build() {
        TCPSetting pigeonReturn = new TCPSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setIp(ip);
        pigeonReturn.setPort(port);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(timeout);
      toListResult.add(ip);
      toListResult.add(port);
      return toListResult;
    }

    static @NonNull TCPSetting fromList(@NonNull ArrayList<Object> list) {
      TCPSetting pigeonResult = new TCPSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object ip = list.get(1);
      pigeonResult.setIp((String) ip);
      Object port = list.get(2);
      pigeonResult.setPort((String) port);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HttpSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String ip;

    public @Nullable String getIp() {
      return ip;
    }

    public void setIp(@Nullable String setterArg) {
      this.ip = setterArg;
    }

    private @Nullable String port;

    public @Nullable String getPort() {
      return port;
    }

    public void setPort(@Nullable String setterArg) {
      this.port = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String ip;

      public @NonNull Builder setIp(@Nullable String setterArg) {
        this.ip = setterArg;
        return this;
      }

      private @Nullable String port;

      public @NonNull Builder setPort(@Nullable String setterArg) {
        this.port = setterArg;
        return this;
      }

      public @NonNull HttpSetting build() {
        HttpSetting pigeonReturn = new HttpSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setIp(ip);
        pigeonReturn.setPort(port);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(timeout);
      toListResult.add(ip);
      toListResult.add(port);
      return toListResult;
    }

    static @NonNull HttpSetting fromList(@NonNull ArrayList<Object> list) {
      HttpSetting pigeonResult = new HttpSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object ip = list.get(1);
      pigeonResult.setIp((String) ip);
      Object port = list.get(2);
      pigeonResult.setPort((String) port);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HttpsSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String ip;

    public @Nullable String getIp() {
      return ip;
    }

    public void setIp(@Nullable String setterArg) {
      this.ip = setterArg;
    }

    private @Nullable String port;

    public @Nullable String getPort() {
      return port;
    }

    public void setPort(@Nullable String setterArg) {
      this.port = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String ip;

      public @NonNull Builder setIp(@Nullable String setterArg) {
        this.ip = setterArg;
        return this;
      }

      private @Nullable String port;

      public @NonNull Builder setPort(@Nullable String setterArg) {
        this.port = setterArg;
        return this;
      }

      public @NonNull HttpsSetting build() {
        HttpsSetting pigeonReturn = new HttpsSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setIp(ip);
        pigeonReturn.setPort(port);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(timeout);
      toListResult.add(ip);
      toListResult.add(port);
      return toListResult;
    }

    static @NonNull HttpsSetting fromList(@NonNull ArrayList<Object> list) {
      HttpsSetting pigeonResult = new HttpsSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object ip = list.get(1);
      pigeonResult.setIp((String) ip);
      Object port = list.get(2);
      pigeonResult.setPort((String) port);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SslSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String ip;

    public @Nullable String getIp() {
      return ip;
    }

    public void setIp(@Nullable String setterArg) {
      this.ip = setterArg;
    }

    private @Nullable String port;

    public @Nullable String getPort() {
      return port;
    }

    public void setPort(@Nullable String setterArg) {
      this.port = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String ip;

      public @NonNull Builder setIp(@Nullable String setterArg) {
        this.ip = setterArg;
        return this;
      }

      private @Nullable String port;

      public @NonNull Builder setPort(@Nullable String setterArg) {
        this.port = setterArg;
        return this;
      }

      public @NonNull SslSetting build() {
        SslSetting pigeonReturn = new SslSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setIp(ip);
        pigeonReturn.setPort(port);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(timeout);
      toListResult.add(ip);
      toListResult.add(port);
      return toListResult;
    }

    static @NonNull SslSetting fromList(@NonNull ArrayList<Object> list) {
      SslSetting pigeonResult = new SslSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object ip = list.get(1);
      pigeonResult.setIp((String) ip);
      Object port = list.get(2);
      pigeonResult.setPort((String) port);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UsbSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String channel;

    public @Nullable String getChannel() {
      return channel;
    }

    public void setChannel(@Nullable String setterArg) {
      this.channel = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String channel;

      public @NonNull Builder setChannel(@Nullable String setterArg) {
        this.channel = setterArg;
        return this;
      }

      public @NonNull UsbSetting build() {
        UsbSetting pigeonReturn = new UsbSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setChannel(channel);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(timeout);
      toListResult.add(channel);
      return toListResult;
    }

    static @NonNull UsbSetting fromList(@NonNull ArrayList<Object> list) {
      UsbSetting pigeonResult = new UsbSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object channel = list.get(1);
      pigeonResult.setChannel((String) channel);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UartSetting {
    private @Nullable Long timeout;

    public @Nullable Long getTimeout() {
      return timeout;
    }

    public void setTimeout(@Nullable Long setterArg) {
      this.timeout = setterArg;
    }

    private @Nullable String serialPort;

    public @Nullable String getSerialPort() {
      return serialPort;
    }

    public void setSerialPort(@Nullable String setterArg) {
      this.serialPort = setterArg;
    }

    private @Nullable String baudRate;

    public @Nullable String getBaudRate() {
      return baudRate;
    }

    public void setBaudRate(@Nullable String setterArg) {
      this.baudRate = setterArg;
    }

    public static final class Builder {

      private @Nullable Long timeout;

      public @NonNull Builder setTimeout(@Nullable Long setterArg) {
        this.timeout = setterArg;
        return this;
      }

      private @Nullable String serialPort;

      public @NonNull Builder setSerialPort(@Nullable String setterArg) {
        this.serialPort = setterArg;
        return this;
      }

      private @Nullable String baudRate;

      public @NonNull Builder setBaudRate(@Nullable String setterArg) {
        this.baudRate = setterArg;
        return this;
      }

      public @NonNull UartSetting build() {
        UartSetting pigeonReturn = new UartSetting();
        pigeonReturn.setTimeout(timeout);
        pigeonReturn.setSerialPort(serialPort);
        pigeonReturn.setBaudRate(baudRate);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(timeout);
      toListResult.add(serialPort);
      toListResult.add(baudRate);
      return toListResult;
    }

    static @NonNull UartSetting fromList(@NonNull ArrayList<Object> list) {
      UartSetting pigeonResult = new UartSetting();
      Object timeout = list.get(0);
      pigeonResult.setTimeout((timeout == null) ? null : ((timeout instanceof Integer) ? (Integer) timeout : (Long) timeout));
      Object serialPort = list.get(1);
      pigeonResult.setSerialPort((String) serialPort);
      Object baudRate = list.get(2);
      pigeonResult.setBaudRate((String) baudRate);
      return pigeonResult;
    }
  }

  private static class POSLinkSetApiCodec extends StandardMessageCodec {
    public static final POSLinkSetApiCodec INSTANCE = new POSLinkSetApiCodec();

    private POSLinkSetApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return HttpSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return HttpsSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return SslSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return TCPSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return UartSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return UsbSetting.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof HttpSetting) {
        stream.write(128);
        writeValue(stream, ((HttpSetting) value).toList());
      } else if (value instanceof HttpsSetting) {
        stream.write(129);
        writeValue(stream, ((HttpsSetting) value).toList());
      } else if (value instanceof SslSetting) {
        stream.write(130);
        writeValue(stream, ((SslSetting) value).toList());
      } else if (value instanceof TCPSetting) {
        stream.write(131);
        writeValue(stream, ((TCPSetting) value).toList());
      } else if (value instanceof UartSetting) {
        stream.write(132);
        writeValue(stream, ((UartSetting) value).toList());
      } else if (value instanceof UsbSetting) {
        stream.write(133);
        writeValue(stream, ((UsbSetting) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkSetApi {

    void setAIDLSetting();

    void setTCPSetting(@NonNull TCPSetting setting);

    void setHttpSetting(@NonNull HttpSetting setting);

    void setHttpsSetting(@NonNull HttpsSetting setting);

    void setSslSetting(@NonNull SslSetting setting);

    void setUsbSetting(@NonNull UsbSetting setting);

    void setUartSetting(@NonNull UartSetting setting);

    @NonNull 
    List<String> getUartDevices();

    void cancel();

    /** The codec used by POSLinkSetApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkSetApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkSetApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkSetApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setAIDLSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.setAIDLSetting();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setTCPSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TCPSetting settingArg = (TCPSetting) args.get(0);
                try {
                  api.setTCPSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setHttpSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HttpSetting settingArg = (HttpSetting) args.get(0);
                try {
                  api.setHttpSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setHttpsSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HttpsSetting settingArg = (HttpsSetting) args.get(0);
                try {
                  api.setHttpsSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setSslSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SslSetting settingArg = (SslSetting) args.get(0);
                try {
                  api.setSslSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setUsbSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UsbSetting settingArg = (UsbSetting) args.get(0);
                try {
                  api.setUsbSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.setUartSetting", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UartSetting settingArg = (UartSetting) args.get(0);
                try {
                  api.setUartSetting(settingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.getUartDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<String> output = api.getUartDevices();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkSetApi.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.cancel();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
