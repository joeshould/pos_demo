// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkTransaction {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum TransactionCardType {
    NOT_SET(0),
    VISA(1),
    MASTER_CARD(2),
    AMEX(3),
    DISCOVER(4),
    DINER_CLUB(5),
    CUP(6),
    MAESTRO(7),
    OTHER(8);

    final int index;

    private TransactionCardType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionReversalReq {
    private @Nullable String originalHostReferenceNumber;

    public @Nullable String getOriginalHostReferenceNumber() {
      return originalHostReferenceNumber;
    }

    public void setOriginalHostReferenceNumber(@Nullable String setterArg) {
      this.originalHostReferenceNumber = setterArg;
    }

    private @Nullable String originalHostData;

    public @Nullable String getOriginalHostData() {
      return originalHostData;
    }

    public void setOriginalHostData(@Nullable String setterArg) {
      this.originalHostData = setterArg;
    }

    public static final class Builder {

      private @Nullable String originalHostReferenceNumber;

      public @NonNull Builder setOriginalHostReferenceNumber(@Nullable String setterArg) {
        this.originalHostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String originalHostData;

      public @NonNull Builder setOriginalHostData(@Nullable String setterArg) {
        this.originalHostData = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionReversalReq build() {
        TransactionTransactionReversalReq pigeonReturn = new TransactionTransactionReversalReq();
        pigeonReturn.setOriginalHostReferenceNumber(originalHostReferenceNumber);
        pigeonReturn.setOriginalHostData(originalHostData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(originalHostReferenceNumber);
      toListResult.add(originalHostData);
      return toListResult;
    }

    static @NonNull TransactionTransactionReversalReq fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionReversalReq pigeonResult = new TransactionTransactionReversalReq();
      Object originalHostReferenceNumber = list.get(0);
      pigeonResult.setOriginalHostReferenceNumber((String) originalHostReferenceNumber);
      Object originalHostData = list.get(1);
      pigeonResult.setOriginalHostData((String) originalHostData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionCompletionReq {
    private @Nullable String transactionAmount;

    public @Nullable String getTransactionAmount() {
      return transactionAmount;
    }

    public void setTransactionAmount(@Nullable String setterArg) {
      this.transactionAmount = setterArg;
    }

    private @Nullable String originalHostReferenceNumber;

    public @Nullable String getOriginalHostReferenceNumber() {
      return originalHostReferenceNumber;
    }

    public void setOriginalHostReferenceNumber(@Nullable String setterArg) {
      this.originalHostReferenceNumber = setterArg;
    }

    private @Nullable String originalHostData;

    public @Nullable String getOriginalHostData() {
      return originalHostData;
    }

    public void setOriginalHostData(@Nullable String setterArg) {
      this.originalHostData = setterArg;
    }

    private @Nullable String verifyCard;

    public @Nullable String getVerifyCard() {
      return verifyCard;
    }

    public void setVerifyCard(@Nullable String setterArg) {
      this.verifyCard = setterArg;
    }

    public static final class Builder {

      private @Nullable String transactionAmount;

      public @NonNull Builder setTransactionAmount(@Nullable String setterArg) {
        this.transactionAmount = setterArg;
        return this;
      }

      private @Nullable String originalHostReferenceNumber;

      public @NonNull Builder setOriginalHostReferenceNumber(@Nullable String setterArg) {
        this.originalHostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String originalHostData;

      public @NonNull Builder setOriginalHostData(@Nullable String setterArg) {
        this.originalHostData = setterArg;
        return this;
      }

      private @Nullable String verifyCard;

      public @NonNull Builder setVerifyCard(@Nullable String setterArg) {
        this.verifyCard = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionCompletionReq build() {
        TransactionTransactionCompletionReq pigeonReturn = new TransactionTransactionCompletionReq();
        pigeonReturn.setTransactionAmount(transactionAmount);
        pigeonReturn.setOriginalHostReferenceNumber(originalHostReferenceNumber);
        pigeonReturn.setOriginalHostData(originalHostData);
        pigeonReturn.setVerifyCard(verifyCard);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(transactionAmount);
      toListResult.add(originalHostReferenceNumber);
      toListResult.add(originalHostData);
      toListResult.add(verifyCard);
      return toListResult;
    }

    static @NonNull TransactionTransactionCompletionReq fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionCompletionReq pigeonResult = new TransactionTransactionCompletionReq();
      Object transactionAmount = list.get(0);
      pigeonResult.setTransactionAmount((String) transactionAmount);
      Object originalHostReferenceNumber = list.get(1);
      pigeonResult.setOriginalHostReferenceNumber((String) originalHostReferenceNumber);
      Object originalHostData = list.get(2);
      pigeonResult.setOriginalHostData((String) originalHostData);
      Object verifyCard = list.get(3);
      pigeonResult.setVerifyCard((String) verifyCard);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionIncrementalReq {
    private @Nullable String transactionAmount;

    public @Nullable String getTransactionAmount() {
      return transactionAmount;
    }

    public void setTransactionAmount(@Nullable String setterArg) {
      this.transactionAmount = setterArg;
    }

    private @Nullable String originalHostReferenceNumber;

    public @Nullable String getOriginalHostReferenceNumber() {
      return originalHostReferenceNumber;
    }

    public void setOriginalHostReferenceNumber(@Nullable String setterArg) {
      this.originalHostReferenceNumber = setterArg;
    }

    private @Nullable String originalHostData;

    public @Nullable String getOriginalHostData() {
      return originalHostData;
    }

    public void setOriginalHostData(@Nullable String setterArg) {
      this.originalHostData = setterArg;
    }

    public static final class Builder {

      private @Nullable String transactionAmount;

      public @NonNull Builder setTransactionAmount(@Nullable String setterArg) {
        this.transactionAmount = setterArg;
        return this;
      }

      private @Nullable String originalHostReferenceNumber;

      public @NonNull Builder setOriginalHostReferenceNumber(@Nullable String setterArg) {
        this.originalHostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String originalHostData;

      public @NonNull Builder setOriginalHostData(@Nullable String setterArg) {
        this.originalHostData = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionIncrementalReq build() {
        TransactionTransactionIncrementalReq pigeonReturn = new TransactionTransactionIncrementalReq();
        pigeonReturn.setTransactionAmount(transactionAmount);
        pigeonReturn.setOriginalHostReferenceNumber(originalHostReferenceNumber);
        pigeonReturn.setOriginalHostData(originalHostData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(transactionAmount);
      toListResult.add(originalHostReferenceNumber);
      toListResult.add(originalHostData);
      return toListResult;
    }

    static @NonNull TransactionTransactionIncrementalReq fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionIncrementalReq pigeonResult = new TransactionTransactionIncrementalReq();
      Object transactionAmount = list.get(0);
      pigeonResult.setTransactionAmount((String) transactionAmount);
      Object originalHostReferenceNumber = list.get(1);
      pigeonResult.setOriginalHostReferenceNumber((String) originalHostReferenceNumber);
      Object originalHostData = list.get(2);
      pigeonResult.setOriginalHostData((String) originalHostData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionAccountReq {
    private @Nullable String cardExpireDate;

    public @Nullable String getCardExpireDate() {
      return cardExpireDate;
    }

    public void setCardExpireDate(@Nullable String setterArg) {
      this.cardExpireDate = setterArg;
    }

    public static final class Builder {

      private @Nullable String cardExpireDate;

      public @NonNull Builder setCardExpireDate(@Nullable String setterArg) {
        this.cardExpireDate = setterArg;
        return this;
      }

      public @NonNull TransactionAccountReq build() {
        TransactionAccountReq pigeonReturn = new TransactionAccountReq();
        pigeonReturn.setCardExpireDate(cardExpireDate);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(cardExpireDate);
      return toListResult;
    }

    static @NonNull TransactionAccountReq fromList(@NonNull ArrayList<Object> list) {
      TransactionAccountReq pigeonResult = new TransactionAccountReq();
      Object cardExpireDate = list.get(0);
      pigeonResult.setCardExpireDate((String) cardExpireDate);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionHostGateway {
    private @Nullable String tokenRequestFlag;

    public @Nullable String getTokenRequestFlag() {
      return tokenRequestFlag;
    }

    public void setTokenRequestFlag(@Nullable String setterArg) {
      this.tokenRequestFlag = setterArg;
    }

    private @Nullable String token;

    public @Nullable String getToken() {
      return token;
    }

    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    public static final class Builder {

      private @Nullable String tokenRequestFlag;

      public @NonNull Builder setTokenRequestFlag(@Nullable String setterArg) {
        this.tokenRequestFlag = setterArg;
        return this;
      }

      private @Nullable String token;

      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }

      public @NonNull TransactionHostGateway build() {
        TransactionHostGateway pigeonReturn = new TransactionHostGateway();
        pigeonReturn.setTokenRequestFlag(tokenRequestFlag);
        pigeonReturn.setToken(token);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(tokenRequestFlag);
      toListResult.add(token);
      return toListResult;
    }

    static @NonNull TransactionHostGateway fromList(@NonNull ArrayList<Object> list) {
      TransactionHostGateway pigeonResult = new TransactionHostGateway();
      Object tokenRequestFlag = list.get(0);
      pigeonResult.setTokenRequestFlag((String) tokenRequestFlag);
      Object token = list.get(1);
      pigeonResult.setToken((String) token);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionStartReq {
    private @Nullable String transactionAmount;

    public @Nullable String getTransactionAmount() {
      return transactionAmount;
    }

    public void setTransactionAmount(@Nullable String setterArg) {
      this.transactionAmount = setterArg;
    }

    private @Nullable String registerReferenceNumber;

    public @Nullable String getRegisterReferenceNumber() {
      return registerReferenceNumber;
    }

    public void setRegisterReferenceNumber(@Nullable String setterArg) {
      this.registerReferenceNumber = setterArg;
    }

    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    private @Nullable String reportStatus;

    public @Nullable String getReportStatus() {
      return reportStatus;
    }

    public void setReportStatus(@Nullable String setterArg) {
      this.reportStatus = setterArg;
    }

    private @Nullable TransactionHostGateway hostGateway;

    public @Nullable TransactionHostGateway getHostGateway() {
      return hostGateway;
    }

    public void setHostGateway(@Nullable TransactionHostGateway setterArg) {
      this.hostGateway = setterArg;
    }

    private @Nullable TransactionAccountReq accountInformation;

    public @Nullable TransactionAccountReq getAccountInformation() {
      return accountInformation;
    }

    public void setAccountInformation(@Nullable TransactionAccountReq setterArg) {
      this.accountInformation = setterArg;
    }

    public static final class Builder {

      private @Nullable String transactionAmount;

      public @NonNull Builder setTransactionAmount(@Nullable String setterArg) {
        this.transactionAmount = setterArg;
        return this;
      }

      private @Nullable String registerReferenceNumber;

      public @NonNull Builder setRegisterReferenceNumber(@Nullable String setterArg) {
        this.registerReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable String reportStatus;

      public @NonNull Builder setReportStatus(@Nullable String setterArg) {
        this.reportStatus = setterArg;
        return this;
      }

      private @Nullable TransactionHostGateway hostGateway;

      public @NonNull Builder setHostGateway(@Nullable TransactionHostGateway setterArg) {
        this.hostGateway = setterArg;
        return this;
      }

      private @Nullable TransactionAccountReq accountInformation;

      public @NonNull Builder setAccountInformation(@Nullable TransactionAccountReq setterArg) {
        this.accountInformation = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionStartReq build() {
        TransactionTransactionStartReq pigeonReturn = new TransactionTransactionStartReq();
        pigeonReturn.setTransactionAmount(transactionAmount);
        pigeonReturn.setRegisterReferenceNumber(registerReferenceNumber);
        pigeonReturn.setAccount(account);
        pigeonReturn.setReportStatus(reportStatus);
        pigeonReturn.setHostGateway(hostGateway);
        pigeonReturn.setAccountInformation(accountInformation);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(transactionAmount);
      toListResult.add(registerReferenceNumber);
      toListResult.add(account);
      toListResult.add(reportStatus);
      toListResult.add((hostGateway == null) ? null : hostGateway.toList());
      toListResult.add((accountInformation == null) ? null : accountInformation.toList());
      return toListResult;
    }

    static @NonNull TransactionTransactionStartReq fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionStartReq pigeonResult = new TransactionTransactionStartReq();
      Object transactionAmount = list.get(0);
      pigeonResult.setTransactionAmount((String) transactionAmount);
      Object registerReferenceNumber = list.get(1);
      pigeonResult.setRegisterReferenceNumber((String) registerReferenceNumber);
      Object account = list.get(2);
      pigeonResult.setAccount((String) account);
      Object reportStatus = list.get(3);
      pigeonResult.setReportStatus((String) reportStatus);
      Object hostGateway = list.get(4);
      pigeonResult.setHostGateway((hostGateway == null) ? null : TransactionHostGateway.fromList((ArrayList<Object>) hostGateway));
      Object accountInformation = list.get(5);
      pigeonResult.setAccountInformation((accountInformation == null) ? null : TransactionAccountReq.fromList((ArrayList<Object>) accountInformation));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionHostRsp {
    private @Nullable String token;

    public @Nullable String getToken() {
      return token;
    }

    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    public static final class Builder {

      private @Nullable String token;

      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }

      public @NonNull TransactionHostRsp build() {
        TransactionHostRsp pigeonReturn = new TransactionHostRsp();
        pigeonReturn.setToken(token);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(token);
      return toListResult;
    }

    static @NonNull TransactionHostRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionHostRsp pigeonResult = new TransactionHostRsp();
      Object token = list.get(0);
      pigeonResult.setToken((String) token);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionAccountRsp {
    private @Nullable String expireDate;

    public @Nullable String getExpireDate() {
      return expireDate;
    }

    public void setExpireDate(@Nullable String setterArg) {
      this.expireDate = setterArg;
    }

    private @Nullable TransactionCardType cardType;

    public @Nullable TransactionCardType getCardType() {
      return cardType;
    }

    public void setCardType(@Nullable TransactionCardType setterArg) {
      this.cardType = setterArg;
    }

    private @Nullable String cardTypeName;

    public @Nullable String getCardTypeName() {
      return cardTypeName;
    }

    public void setCardTypeName(@Nullable String setterArg) {
      this.cardTypeName = setterArg;
    }

    public static final class Builder {

      private @Nullable String expireDate;

      public @NonNull Builder setExpireDate(@Nullable String setterArg) {
        this.expireDate = setterArg;
        return this;
      }

      private @Nullable TransactionCardType cardType;

      public @NonNull Builder setCardType(@Nullable TransactionCardType setterArg) {
        this.cardType = setterArg;
        return this;
      }

      private @Nullable String cardTypeName;

      public @NonNull Builder setCardTypeName(@Nullable String setterArg) {
        this.cardTypeName = setterArg;
        return this;
      }

      public @NonNull TransactionAccountRsp build() {
        TransactionAccountRsp pigeonReturn = new TransactionAccountRsp();
        pigeonReturn.setExpireDate(expireDate);
        pigeonReturn.setCardType(cardType);
        pigeonReturn.setCardTypeName(cardTypeName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(expireDate);
      toListResult.add(cardType == null ? null : cardType.index);
      toListResult.add(cardTypeName);
      return toListResult;
    }

    static @NonNull TransactionAccountRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionAccountRsp pigeonResult = new TransactionAccountRsp();
      Object expireDate = list.get(0);
      pigeonResult.setExpireDate((String) expireDate);
      Object cardType = list.get(1);
      pigeonResult.setCardType(cardType == null ? null : TransactionCardType.values()[(int) cardType]);
      Object cardTypeName = list.get(2);
      pigeonResult.setCardTypeName((String) cardTypeName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionStartRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String hostReferenceNumber;

    public @Nullable String getHostReferenceNumber() {
      return hostReferenceNumber;
    }

    public void setHostReferenceNumber(@Nullable String setterArg) {
      this.hostReferenceNumber = setterArg;
    }

    private @Nullable String hostData;

    public @Nullable String getHostData() {
      return hostData;
    }

    public void setHostData(@Nullable String setterArg) {
      this.hostData = setterArg;
    }

    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    private @Nullable String timestamp;

    public @Nullable String getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@Nullable String setterArg) {
      this.timestamp = setterArg;
    }

    private @Nullable TransactionAccountRsp accountInformation;

    public @Nullable TransactionAccountRsp getAccountInformation() {
      return accountInformation;
    }

    public void setAccountInformation(@Nullable TransactionAccountRsp setterArg) {
      this.accountInformation = setterArg;
    }

    private @Nullable TransactionHostRsp hostInformation;

    public @Nullable TransactionHostRsp getHostInformation() {
      return hostInformation;
    }

    public void setHostInformation(@Nullable TransactionHostRsp setterArg) {
      this.hostInformation = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String hostReferenceNumber;

      public @NonNull Builder setHostReferenceNumber(@Nullable String setterArg) {
        this.hostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String hostData;

      public @NonNull Builder setHostData(@Nullable String setterArg) {
        this.hostData = setterArg;
        return this;
      }

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable String timestamp;

      public @NonNull Builder setTimestamp(@Nullable String setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      private @Nullable TransactionAccountRsp accountInformation;

      public @NonNull Builder setAccountInformation(@Nullable TransactionAccountRsp setterArg) {
        this.accountInformation = setterArg;
        return this;
      }

      private @Nullable TransactionHostRsp hostInformation;

      public @NonNull Builder setHostInformation(@Nullable TransactionHostRsp setterArg) {
        this.hostInformation = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionStartRsp build() {
        TransactionTransactionStartRsp pigeonReturn = new TransactionTransactionStartRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setHostReferenceNumber(hostReferenceNumber);
        pigeonReturn.setHostData(hostData);
        pigeonReturn.setAccount(account);
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setAccountInformation(accountInformation);
        pigeonReturn.setHostInformation(hostInformation);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(hostReferenceNumber);
      toListResult.add(hostData);
      toListResult.add(account);
      toListResult.add(timestamp);
      toListResult.add((accountInformation == null) ? null : accountInformation.toList());
      toListResult.add((hostInformation == null) ? null : hostInformation.toList());
      return toListResult;
    }

    static @NonNull TransactionTransactionStartRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionStartRsp pigeonResult = new TransactionTransactionStartRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object hostReferenceNumber = list.get(2);
      pigeonResult.setHostReferenceNumber((String) hostReferenceNumber);
      Object hostData = list.get(3);
      pigeonResult.setHostData((String) hostData);
      Object account = list.get(4);
      pigeonResult.setAccount((String) account);
      Object timestamp = list.get(5);
      pigeonResult.setTimestamp((String) timestamp);
      Object accountInformation = list.get(6);
      pigeonResult.setAccountInformation((accountInformation == null) ? null : TransactionAccountRsp.fromList((ArrayList<Object>) accountInformation));
      Object hostInformation = list.get(7);
      pigeonResult.setHostInformation((hostInformation == null) ? null : TransactionHostRsp.fromList((ArrayList<Object>) hostInformation));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionIncrementalRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String hostReferenceNumber;

    public @Nullable String getHostReferenceNumber() {
      return hostReferenceNumber;
    }

    public void setHostReferenceNumber(@Nullable String setterArg) {
      this.hostReferenceNumber = setterArg;
    }

    private @Nullable String hostData;

    public @Nullable String getHostData() {
      return hostData;
    }

    public void setHostData(@Nullable String setterArg) {
      this.hostData = setterArg;
    }

    private @Nullable String timestamp;

    public @Nullable String getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@Nullable String setterArg) {
      this.timestamp = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String hostReferenceNumber;

      public @NonNull Builder setHostReferenceNumber(@Nullable String setterArg) {
        this.hostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String hostData;

      public @NonNull Builder setHostData(@Nullable String setterArg) {
        this.hostData = setterArg;
        return this;
      }

      private @Nullable String timestamp;

      public @NonNull Builder setTimestamp(@Nullable String setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionIncrementalRsp build() {
        TransactionTransactionIncrementalRsp pigeonReturn = new TransactionTransactionIncrementalRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setHostReferenceNumber(hostReferenceNumber);
        pigeonReturn.setHostData(hostData);
        pigeonReturn.setTimestamp(timestamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(hostReferenceNumber);
      toListResult.add(hostData);
      toListResult.add(timestamp);
      return toListResult;
    }

    static @NonNull TransactionTransactionIncrementalRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionIncrementalRsp pigeonResult = new TransactionTransactionIncrementalRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object hostReferenceNumber = list.get(2);
      pigeonResult.setHostReferenceNumber((String) hostReferenceNumber);
      Object hostData = list.get(3);
      pigeonResult.setHostData((String) hostData);
      Object timestamp = list.get(4);
      pigeonResult.setTimestamp((String) timestamp);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionCompletionRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String hostReferenceNumber;

    public @Nullable String getHostReferenceNumber() {
      return hostReferenceNumber;
    }

    public void setHostReferenceNumber(@Nullable String setterArg) {
      this.hostReferenceNumber = setterArg;
    }

    private @Nullable String hostData;

    public @Nullable String getHostData() {
      return hostData;
    }

    public void setHostData(@Nullable String setterArg) {
      this.hostData = setterArg;
    }

    private @Nullable String timestamp;

    public @Nullable String getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@Nullable String setterArg) {
      this.timestamp = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String hostReferenceNumber;

      public @NonNull Builder setHostReferenceNumber(@Nullable String setterArg) {
        this.hostReferenceNumber = setterArg;
        return this;
      }

      private @Nullable String hostData;

      public @NonNull Builder setHostData(@Nullable String setterArg) {
        this.hostData = setterArg;
        return this;
      }

      private @Nullable String timestamp;

      public @NonNull Builder setTimestamp(@Nullable String setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionCompletionRsp build() {
        TransactionTransactionCompletionRsp pigeonReturn = new TransactionTransactionCompletionRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setHostReferenceNumber(hostReferenceNumber);
        pigeonReturn.setHostData(hostData);
        pigeonReturn.setTimestamp(timestamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(hostReferenceNumber);
      toListResult.add(hostData);
      toListResult.add(timestamp);
      return toListResult;
    }

    static @NonNull TransactionTransactionCompletionRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionCompletionRsp pigeonResult = new TransactionTransactionCompletionRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object hostReferenceNumber = list.get(2);
      pigeonResult.setHostReferenceNumber((String) hostReferenceNumber);
      Object hostData = list.get(3);
      pigeonResult.setHostData((String) hostData);
      Object timestamp = list.get(4);
      pigeonResult.setTimestamp((String) timestamp);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TransactionTransactionReversalRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      public @NonNull TransactionTransactionReversalRsp build() {
        TransactionTransactionReversalRsp pigeonReturn = new TransactionTransactionReversalRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      return toListResult;
    }

    static @NonNull TransactionTransactionReversalRsp fromList(@NonNull ArrayList<Object> list) {
      TransactionTransactionReversalRsp pigeonResult = new TransactionTransactionReversalRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class POSLinkTransactionApiCodec extends StandardMessageCodec {
    public static final POSLinkTransactionApiCodec INSTANCE = new POSLinkTransactionApiCodec();

    private POSLinkTransactionApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return TransactionAccountReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return TransactionAccountRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return TransactionHostGateway.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return TransactionHostRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return TransactionTransactionCompletionReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return TransactionTransactionCompletionRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return TransactionTransactionIncrementalReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return TransactionTransactionIncrementalRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return TransactionTransactionReversalReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return TransactionTransactionReversalRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return TransactionTransactionStartReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return TransactionTransactionStartRsp.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof TransactionAccountReq) {
        stream.write(128);
        writeValue(stream, ((TransactionAccountReq) value).toList());
      } else if (value instanceof TransactionAccountRsp) {
        stream.write(129);
        writeValue(stream, ((TransactionAccountRsp) value).toList());
      } else if (value instanceof TransactionHostGateway) {
        stream.write(130);
        writeValue(stream, ((TransactionHostGateway) value).toList());
      } else if (value instanceof TransactionHostRsp) {
        stream.write(131);
        writeValue(stream, ((TransactionHostRsp) value).toList());
      } else if (value instanceof TransactionTransactionCompletionReq) {
        stream.write(132);
        writeValue(stream, ((TransactionTransactionCompletionReq) value).toList());
      } else if (value instanceof TransactionTransactionCompletionRsp) {
        stream.write(133);
        writeValue(stream, ((TransactionTransactionCompletionRsp) value).toList());
      } else if (value instanceof TransactionTransactionIncrementalReq) {
        stream.write(134);
        writeValue(stream, ((TransactionTransactionIncrementalReq) value).toList());
      } else if (value instanceof TransactionTransactionIncrementalRsp) {
        stream.write(135);
        writeValue(stream, ((TransactionTransactionIncrementalRsp) value).toList());
      } else if (value instanceof TransactionTransactionReversalReq) {
        stream.write(136);
        writeValue(stream, ((TransactionTransactionReversalReq) value).toList());
      } else if (value instanceof TransactionTransactionReversalRsp) {
        stream.write(137);
        writeValue(stream, ((TransactionTransactionReversalRsp) value).toList());
      } else if (value instanceof TransactionTransactionStartReq) {
        stream.write(138);
        writeValue(stream, ((TransactionTransactionStartReq) value).toList());
      } else if (value instanceof TransactionTransactionStartRsp) {
        stream.write(139);
        writeValue(stream, ((TransactionTransactionStartRsp) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkTransactionApi {

    void transactionStart(@NonNull TransactionTransactionStartReq req, @NonNull Result<TransactionTransactionStartRsp> result);

    void transactionIncremental(@NonNull TransactionTransactionIncrementalReq req, @NonNull Result<TransactionTransactionIncrementalRsp> result);

    void transactionCompletion(@NonNull TransactionTransactionCompletionReq req, @NonNull Result<TransactionTransactionCompletionRsp> result);

    void transactionReversal(@NonNull TransactionTransactionReversalReq req, @NonNull Result<TransactionTransactionReversalRsp> result);

    /** The codec used by POSLinkTransactionApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkTransactionApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkTransactionApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkTransactionApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkTransactionApi.transactionStart", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TransactionTransactionStartReq reqArg = (TransactionTransactionStartReq) args.get(0);
                Result<TransactionTransactionStartRsp> resultCallback =
                    new Result<TransactionTransactionStartRsp>() {
                      public void success(TransactionTransactionStartRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.transactionStart(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkTransactionApi.transactionIncremental", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TransactionTransactionIncrementalReq reqArg = (TransactionTransactionIncrementalReq) args.get(0);
                Result<TransactionTransactionIncrementalRsp> resultCallback =
                    new Result<TransactionTransactionIncrementalRsp>() {
                      public void success(TransactionTransactionIncrementalRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.transactionIncremental(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkTransactionApi.transactionCompletion", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TransactionTransactionCompletionReq reqArg = (TransactionTransactionCompletionReq) args.get(0);
                Result<TransactionTransactionCompletionRsp> resultCallback =
                    new Result<TransactionTransactionCompletionRsp>() {
                      public void success(TransactionTransactionCompletionRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.transactionCompletion(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkTransactionApi.transactionReversal", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TransactionTransactionReversalReq reqArg = (TransactionTransactionReversalReq) args.get(0);
                Result<TransactionTransactionReversalRsp> resultCallback =
                    new Result<TransactionTransactionReversalRsp>() {
                      public void success(TransactionTransactionReversalRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.transactionReversal(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
