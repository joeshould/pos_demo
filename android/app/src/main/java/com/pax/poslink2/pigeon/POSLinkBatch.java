// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.pax.poslink2.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class POSLinkBatch {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BatchBatchClearReq {
    private @Nullable String classID;

    public @Nullable String getClassID() {
      return classID;
    }

    public void setClassID(@Nullable String setterArg) {
      this.classID = setterArg;
    }

    public static final class Builder {

      private @Nullable String classID;

      public @NonNull Builder setClassID(@Nullable String setterArg) {
        this.classID = setterArg;
        return this;
      }

      public @NonNull BatchBatchClearReq build() {
        BatchBatchClearReq pigeonReturn = new BatchBatchClearReq();
        pigeonReturn.setClassID(classID);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(classID);
      return toListResult;
    }

    static @NonNull BatchBatchClearReq fromList(@NonNull ArrayList<Object> list) {
      BatchBatchClearReq pigeonResult = new BatchBatchClearReq();
      Object classID = list.get(0);
      pigeonResult.setClassID((String) classID);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BatchBatchCloseReq {
    private @Nullable String classID;

    public @Nullable String getClassID() {
      return classID;
    }

    public void setClassID(@Nullable String setterArg) {
      this.classID = setterArg;
    }

    public static final class Builder {

      private @Nullable String classID;

      public @NonNull Builder setClassID(@Nullable String setterArg) {
        this.classID = setterArg;
        return this;
      }

      public @NonNull BatchBatchCloseReq build() {
        BatchBatchCloseReq pigeonReturn = new BatchBatchCloseReq();
        pigeonReturn.setClassID(classID);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(classID);
      return toListResult;
    }

    static @NonNull BatchBatchCloseReq fromList(@NonNull ArrayList<Object> list) {
      BatchBatchCloseReq pigeonResult = new BatchBatchCloseReq();
      Object classID = list.get(0);
      pigeonResult.setClassID((String) classID);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BatchBatchCloseRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    private @Nullable String hostData;

    public @Nullable String getHostData() {
      return hostData;
    }

    public void setHostData(@Nullable String setterArg) {
      this.hostData = setterArg;
    }

    private @Nullable String totalCount;

    public @Nullable String getTotalCount() {
      return totalCount;
    }

    public void setTotalCount(@Nullable String setterArg) {
      this.totalCount = setterArg;
    }

    private @Nullable String totalAmount;

    public @Nullable String getTotalAmount() {
      return totalAmount;
    }

    public void setTotalAmount(@Nullable String setterArg) {
      this.totalAmount = setterArg;
    }

    private @Nullable String timeStamp;

    public @Nullable String getTimeStamp() {
      return timeStamp;
    }

    public void setTimeStamp(@Nullable String setterArg) {
      this.timeStamp = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      private @Nullable String hostData;

      public @NonNull Builder setHostData(@Nullable String setterArg) {
        this.hostData = setterArg;
        return this;
      }

      private @Nullable String totalCount;

      public @NonNull Builder setTotalCount(@Nullable String setterArg) {
        this.totalCount = setterArg;
        return this;
      }

      private @Nullable String totalAmount;

      public @NonNull Builder setTotalAmount(@Nullable String setterArg) {
        this.totalAmount = setterArg;
        return this;
      }

      private @Nullable String timeStamp;

      public @NonNull Builder setTimeStamp(@Nullable String setterArg) {
        this.timeStamp = setterArg;
        return this;
      }

      public @NonNull BatchBatchCloseRsp build() {
        BatchBatchCloseRsp pigeonReturn = new BatchBatchCloseRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        pigeonReturn.setHostData(hostData);
        pigeonReturn.setTotalCount(totalCount);
        pigeonReturn.setTotalAmount(totalAmount);
        pigeonReturn.setTimeStamp(timeStamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      toListResult.add(hostData);
      toListResult.add(totalCount);
      toListResult.add(totalAmount);
      toListResult.add(timeStamp);
      return toListResult;
    }

    static @NonNull BatchBatchCloseRsp fromList(@NonNull ArrayList<Object> list) {
      BatchBatchCloseRsp pigeonResult = new BatchBatchCloseRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      Object hostData = list.get(2);
      pigeonResult.setHostData((String) hostData);
      Object totalCount = list.get(3);
      pigeonResult.setTotalCount((String) totalCount);
      Object totalAmount = list.get(4);
      pigeonResult.setTotalAmount((String) totalAmount);
      Object timeStamp = list.get(5);
      pigeonResult.setTimeStamp((String) timeStamp);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BatchBatchClearRsp {
    private @Nullable String responseCode;

    public @Nullable String getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@Nullable String setterArg) {
      this.responseCode = setterArg;
    }

    private @Nullable String responseMessage;

    public @Nullable String getResponseMessage() {
      return responseMessage;
    }

    public void setResponseMessage(@Nullable String setterArg) {
      this.responseMessage = setterArg;
    }

    public static final class Builder {

      private @Nullable String responseCode;

      public @NonNull Builder setResponseCode(@Nullable String setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String responseMessage;

      public @NonNull Builder setResponseMessage(@Nullable String setterArg) {
        this.responseMessage = setterArg;
        return this;
      }

      public @NonNull BatchBatchClearRsp build() {
        BatchBatchClearRsp pigeonReturn = new BatchBatchClearRsp();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setResponseMessage(responseMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(responseCode);
      toListResult.add(responseMessage);
      return toListResult;
    }

    static @NonNull BatchBatchClearRsp fromList(@NonNull ArrayList<Object> list) {
      BatchBatchClearRsp pigeonResult = new BatchBatchClearRsp();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode((String) responseCode);
      Object responseMessage = list.get(1);
      pigeonResult.setResponseMessage((String) responseMessage);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class POSLinkBatchApiCodec extends StandardMessageCodec {
    public static final POSLinkBatchApiCodec INSTANCE = new POSLinkBatchApiCodec();

    private POSLinkBatchApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BatchBatchClearReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return BatchBatchClearRsp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return BatchBatchCloseReq.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return BatchBatchCloseRsp.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BatchBatchClearReq) {
        stream.write(128);
        writeValue(stream, ((BatchBatchClearReq) value).toList());
      } else if (value instanceof BatchBatchClearRsp) {
        stream.write(129);
        writeValue(stream, ((BatchBatchClearRsp) value).toList());
      } else if (value instanceof BatchBatchCloseReq) {
        stream.write(130);
        writeValue(stream, ((BatchBatchCloseReq) value).toList());
      } else if (value instanceof BatchBatchCloseRsp) {
        stream.write(131);
        writeValue(stream, ((BatchBatchCloseRsp) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface POSLinkBatchApi {

    void batchClose(@NonNull BatchBatchCloseReq req, @NonNull Result<BatchBatchCloseRsp> result);

    void batchClear(@NonNull BatchBatchClearReq req, @NonNull Result<BatchBatchClearRsp> result);

    /** The codec used by POSLinkBatchApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return POSLinkBatchApiCodec.INSTANCE;
    }
    /**Sets up an instance of `POSLinkBatchApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable POSLinkBatchApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkBatchApi.batchClose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                BatchBatchCloseReq reqArg = (BatchBatchCloseReq) args.get(0);
                Result<BatchBatchCloseRsp> resultCallback =
                    new Result<BatchBatchCloseRsp>() {
                      public void success(BatchBatchCloseRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.batchClose(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.poslink2.POSLinkBatchApi.batchClear", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                BatchBatchClearReq reqArg = (BatchBatchClearReq) args.get(0);
                Result<BatchBatchClearRsp> resultCallback =
                    new Result<BatchBatchClearRsp>() {
                      public void success(BatchBatchClearRsp result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.batchClear(reqArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
