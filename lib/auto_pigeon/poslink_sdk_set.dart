// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class TCPSetting {
  TCPSetting({
    this.timeout,
    this.ip,
    this.port,
  });

  int? timeout;

  String? ip;

  String? port;

  Object encode() {
    return <Object?>[
      timeout,
      ip,
      port,
    ];
  }

  static TCPSetting decode(Object result) {
    result as List<Object?>;
    return TCPSetting(
      timeout: result[0] as int?,
      ip: result[1] as String?,
      port: result[2] as String?,
    );
  }
}

class HttpSetting {
  HttpSetting({
    this.timeout,
    this.ip,
    this.port,
  });

  int? timeout;

  String? ip;

  String? port;

  Object encode() {
    return <Object?>[
      timeout,
      ip,
      port,
    ];
  }

  static HttpSetting decode(Object result) {
    result as List<Object?>;
    return HttpSetting(
      timeout: result[0] as int?,
      ip: result[1] as String?,
      port: result[2] as String?,
    );
  }
}

class HttpsSetting {
  HttpsSetting({
    this.timeout,
    this.ip,
    this.port,
  });

  int? timeout;

  String? ip;

  String? port;

  Object encode() {
    return <Object?>[
      timeout,
      ip,
      port,
    ];
  }

  static HttpsSetting decode(Object result) {
    result as List<Object?>;
    return HttpsSetting(
      timeout: result[0] as int?,
      ip: result[1] as String?,
      port: result[2] as String?,
    );
  }
}

class SslSetting {
  SslSetting({
    this.timeout,
    this.ip,
    this.port,
  });

  int? timeout;

  String? ip;

  String? port;

  Object encode() {
    return <Object?>[
      timeout,
      ip,
      port,
    ];
  }

  static SslSetting decode(Object result) {
    result as List<Object?>;
    return SslSetting(
      timeout: result[0] as int?,
      ip: result[1] as String?,
      port: result[2] as String?,
    );
  }
}

class UsbSetting {
  UsbSetting({
    this.timeout,
    this.channel,
  });

  int? timeout;

  String? channel;

  Object encode() {
    return <Object?>[
      timeout,
      channel,
    ];
  }

  static UsbSetting decode(Object result) {
    result as List<Object?>;
    return UsbSetting(
      timeout: result[0] as int?,
      channel: result[1] as String?,
    );
  }
}

class UartSetting {
  UartSetting({
    this.timeout,
    this.serialPort,
    this.baudRate,
  });

  int? timeout;

  String? serialPort;

  String? baudRate;

  Object encode() {
    return <Object?>[
      timeout,
      serialPort,
      baudRate,
    ];
  }

  static UartSetting decode(Object result) {
    result as List<Object?>;
    return UartSetting(
      timeout: result[0] as int?,
      serialPort: result[1] as String?,
      baudRate: result[2] as String?,
    );
  }
}

class _POSLinkSetApiCodec extends StandardMessageCodec {
  const _POSLinkSetApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HttpSetting) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is HttpsSetting) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SslSetting) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TCPSetting) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is UartSetting) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is UsbSetting) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return HttpSetting.decode(readValue(buffer)!);
      case 129: 
        return HttpsSetting.decode(readValue(buffer)!);
      case 130: 
        return SslSetting.decode(readValue(buffer)!);
      case 131: 
        return TCPSetting.decode(readValue(buffer)!);
      case 132: 
        return UartSetting.decode(readValue(buffer)!);
      case 133: 
        return UsbSetting.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkSetApi {
  /// Constructor for [POSLinkSetApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkSetApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkSetApiCodec();

  Future<void> setAIDLSetting() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setAIDLSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTCPSetting(TCPSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setTCPSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setHttpSetting(HttpSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setHttpSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setHttpsSetting(HttpsSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setHttpsSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSslSetting(SslSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setSslSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUsbSetting(UsbSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setUsbSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUartSetting(UartSetting arg_setting) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.setUartSetting', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_setting]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<String?>> getUartDevices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.getUartDevices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  Future<void> cancel() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkSetApi.cancel', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
