// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class AdminSConfigurationInfo {
  AdminSConfigurationInfo({
    this.name,
    this.value,
  });

  String? name;

  String? value;

  Object encode() {
    return <Object?>[
      name,
      value,
    ];
  }

  static AdminSConfigurationInfo decode(Object result) {
    result as List<Object?>;
    return AdminSConfigurationInfo(
      name: result[0] as String?,
      value: result[1] as String?,
    );
  }
}

class AdminSetConfigurationReq {
  AdminSetConfigurationReq({
    this.configurations,
  });

  List<AdminSConfigurationInfo?>? configurations;

  Object encode() {
    return <Object?>[
      configurations,
    ];
  }

  static AdminSetConfigurationReq decode(Object result) {
    result as List<Object?>;
    return AdminSetConfigurationReq(
      configurations: (result[0] as List<Object?>?)?.cast<AdminSConfigurationInfo?>(),
    );
  }
}

class AdminGetConfigurationReq {
  AdminGetConfigurationReq({
    this.names,
  });

  List<String?>? names;

  Object encode() {
    return <Object?>[
      names,
    ];
  }

  static AdminGetConfigurationReq decode(Object result) {
    result as List<Object?>;
    return AdminGetConfigurationReq(
      names: (result[0] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class AdminResetReq {
  AdminResetReq({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static AdminResetReq decode(Object result) {
    result as List<Object?>;
    return AdminResetReq(
      classID: result[0] as String?,
    );
  }
}

class AdminPingReq {
  AdminPingReq({
    this.targetName,
    this.timeout,
  });

  String? targetName;

  String? timeout;

  Object encode() {
    return <Object?>[
      targetName,
      timeout,
    ];
  }

  static AdminPingReq decode(Object result) {
    result as List<Object?>;
    return AdminPingReq(
      targetName: result[0] as String?,
      timeout: result[1] as String?,
    );
  }
}

class AdminRebootReq {
  AdminRebootReq({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static AdminRebootReq decode(Object result) {
    result as List<Object?>;
    return AdminRebootReq(
      classID: result[0] as String?,
    );
  }
}

class AdminGetTerminalInfoReq {
  AdminGetTerminalInfoReq({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static AdminGetTerminalInfoReq decode(Object result) {
    result as List<Object?>;
    return AdminGetTerminalInfoReq(
      classID: result[0] as String?,
    );
  }
}

class AdminGConfigurationInfo {
  AdminGConfigurationInfo({
    this.name,
    this.value,
  });

  String? name;

  String? value;

  Object encode() {
    return <Object?>[
      name,
      value,
    ];
  }

  static AdminGConfigurationInfo decode(Object result) {
    result as List<Object?>;
    return AdminGConfigurationInfo(
      name: result[0] as String?,
      value: result[1] as String?,
    );
  }
}

class AdminGetConfigurationRsp {
  AdminGetConfigurationRsp({
    this.responseCode,
    this.responseMessage,
    this.configurations,
  });

  String? responseCode;

  String? responseMessage;

  List<AdminGConfigurationInfo?>? configurations;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      configurations,
    ];
  }

  static AdminGetConfigurationRsp decode(Object result) {
    result as List<Object?>;
    return AdminGetConfigurationRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      configurations: (result[2] as List<Object?>?)?.cast<AdminGConfigurationInfo?>(),
    );
  }
}

class AdminRebootRsp {
  AdminRebootRsp({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static AdminRebootRsp decode(Object result) {
    result as List<Object?>;
    return AdminRebootRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class AdminPingRsp {
  AdminPingRsp({
    this.responseCode,
    this.responseMessage,
    this.rtt,
  });

  String? responseCode;

  String? responseMessage;

  String? rtt;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      rtt,
    ];
  }

  static AdminPingRsp decode(Object result) {
    result as List<Object?>;
    return AdminPingRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      rtt: result[2] as String?,
    );
  }
}

class AdminResetRsp {
  AdminResetRsp({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static AdminResetRsp decode(Object result) {
    result as List<Object?>;
    return AdminResetRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class AdminGetTerminalInfoRsp {
  AdminGetTerminalInfoRsp({
    this.responseCode,
    this.responseMessage,
    this.sn,
    this.modelName,
    this.osVersion,
  });

  String? responseCode;

  String? responseMessage;

  String? sn;

  String? modelName;

  String? osVersion;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      sn,
      modelName,
      osVersion,
    ];
  }

  static AdminGetTerminalInfoRsp decode(Object result) {
    result as List<Object?>;
    return AdminGetTerminalInfoRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      sn: result[2] as String?,
      modelName: result[3] as String?,
      osVersion: result[4] as String?,
    );
  }
}

class AdminSetConfigurationRsp {
  AdminSetConfigurationRsp({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static AdminSetConfigurationRsp decode(Object result) {
    result as List<Object?>;
    return AdminSetConfigurationRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class _POSLinkAdminApiCodec extends StandardMessageCodec {
  const _POSLinkAdminApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdminGConfigurationInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AdminGetConfigurationReq) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AdminGetConfigurationRsp) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is AdminGetTerminalInfoReq) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is AdminGetTerminalInfoRsp) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is AdminPingReq) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is AdminPingRsp) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is AdminRebootReq) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is AdminRebootRsp) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is AdminResetReq) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is AdminResetRsp) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is AdminSConfigurationInfo) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is AdminSetConfigurationReq) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is AdminSetConfigurationRsp) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdminGConfigurationInfo.decode(readValue(buffer)!);
      case 129: 
        return AdminGetConfigurationReq.decode(readValue(buffer)!);
      case 130: 
        return AdminGetConfigurationRsp.decode(readValue(buffer)!);
      case 131: 
        return AdminGetTerminalInfoReq.decode(readValue(buffer)!);
      case 132: 
        return AdminGetTerminalInfoRsp.decode(readValue(buffer)!);
      case 133: 
        return AdminPingReq.decode(readValue(buffer)!);
      case 134: 
        return AdminPingRsp.decode(readValue(buffer)!);
      case 135: 
        return AdminRebootReq.decode(readValue(buffer)!);
      case 136: 
        return AdminRebootRsp.decode(readValue(buffer)!);
      case 137: 
        return AdminResetReq.decode(readValue(buffer)!);
      case 138: 
        return AdminResetRsp.decode(readValue(buffer)!);
      case 139: 
        return AdminSConfigurationInfo.decode(readValue(buffer)!);
      case 140: 
        return AdminSetConfigurationReq.decode(readValue(buffer)!);
      case 141: 
        return AdminSetConfigurationRsp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkAdminApi {
  /// Constructor for [POSLinkAdminApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkAdminApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkAdminApiCodec();

  Future<AdminGetTerminalInfoRsp> getTerminalInfo(AdminGetTerminalInfoReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.getTerminalInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminGetTerminalInfoRsp?)!;
    }
  }

  Future<AdminRebootRsp> reboot(AdminRebootReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.reboot', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminRebootRsp?)!;
    }
  }

  Future<AdminPingRsp> ping(AdminPingReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.ping', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminPingRsp?)!;
    }
  }

  Future<AdminResetRsp> reset(AdminResetReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.reset', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminResetRsp?)!;
    }
  }

  Future<AdminGetConfigurationRsp> getConfiguration(AdminGetConfigurationReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.getConfiguration', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminGetConfigurationRsp?)!;
    }
  }

  Future<AdminSetConfigurationRsp> setConfiguration(AdminSetConfigurationReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkAdminApi.setConfiguration', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AdminSetConfigurationRsp?)!;
    }
  }
}
