// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum ReportCardType {
  NotSet,
  Visa,
  MasterCard,
  Amex,
  Discover,
  DinerClub,
  Cup,
  Maestro,
  Other,
}

class ReportGetTransactionInfoReq {
  ReportGetTransactionInfoReq({
    this.registerReferenceNumber,
  });

  String? registerReferenceNumber;

  Object encode() {
    return <Object?>[
      registerReferenceNumber,
    ];
  }

  static ReportGetTransactionInfoReq decode(Object result) {
    result as List<Object?>;
    return ReportGetTransactionInfoReq(
      registerReferenceNumber: result[0] as String?,
    );
  }
}

class ReportGetCardStatusReq {
  ReportGetCardStatusReq({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ReportGetCardStatusReq decode(Object result) {
    result as List<Object?>;
    return ReportGetCardStatusReq(
      classID: result[0] as String?,
    );
  }
}

class ReportGetTraceInfoByCardReq {
  ReportGetTraceInfoByCardReq({
    this.timeout,
    this.transactionAmount,
  });

  String? timeout;

  String? transactionAmount;

  Object encode() {
    return <Object?>[
      timeout,
      transactionAmount,
    ];
  }

  static ReportGetTraceInfoByCardReq decode(Object result) {
    result as List<Object?>;
    return ReportGetTraceInfoByCardReq(
      timeout: result[0] as String?,
      transactionAmount: result[1] as String?,
    );
  }
}

class ReportGetCardInfoReq {
  ReportGetCardInfoReq({
    this.timeout,
  });

  String? timeout;

  Object encode() {
    return <Object?>[
      timeout,
    ];
  }

  static ReportGetCardInfoReq decode(Object result) {
    result as List<Object?>;
    return ReportGetCardInfoReq(
      timeout: result[0] as String?,
    );
  }
}

class ReportAccountRsp {
  ReportAccountRsp({
    this.expireDate,
    this.cardType,
    this.cardTypeName,
  });

  String? expireDate;

  ReportCardType? cardType;

  String? cardTypeName;

  Object encode() {
    return <Object?>[
      expireDate,
      cardType?.index,
      cardTypeName,
    ];
  }

  static ReportAccountRsp decode(Object result) {
    result as List<Object?>;
    return ReportAccountRsp(
      expireDate: result[0] as String?,
      cardType: result[1] != null
          ? ReportCardType.values[result[1]! as int]
          : null,
      cardTypeName: result[2] as String?,
    );
  }
}

class ReportGetCardInfoRsp {
  ReportGetCardInfoRsp({
    this.responseCode,
    this.responseMessage,
    this.account,
    this.accountInformation,
  });

  String? responseCode;

  String? responseMessage;

  String? account;

  ReportAccountRsp? accountInformation;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      account,
      accountInformation?.encode(),
    ];
  }

  static ReportGetCardInfoRsp decode(Object result) {
    result as List<Object?>;
    return ReportGetCardInfoRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      account: result[2] as String?,
      accountInformation: result[3] != null
          ? ReportAccountRsp.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class ReportTraceInfo {
  ReportTraceInfo({
    this.registerReferenceNumber,
    this.hostReferenceNumber,
  });

  String? registerReferenceNumber;

  String? hostReferenceNumber;

  Object encode() {
    return <Object?>[
      registerReferenceNumber,
      hostReferenceNumber,
    ];
  }

  static ReportTraceInfo decode(Object result) {
    result as List<Object?>;
    return ReportTraceInfo(
      registerReferenceNumber: result[0] as String?,
      hostReferenceNumber: result[1] as String?,
    );
  }
}

class ReportGetTraceInfoByCardRsp {
  ReportGetTraceInfoByCardRsp({
    this.responseCode,
    this.responseMessage,
    this.traceInfo,
    this.account,
  });

  String? responseCode;

  String? responseMessage;

  List<ReportTraceInfo?>? traceInfo;

  String? account;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      traceInfo,
      account,
    ];
  }

  static ReportGetTraceInfoByCardRsp decode(Object result) {
    result as List<Object?>;
    return ReportGetTraceInfoByCardRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      traceInfo: (result[2] as List<Object?>?)?.cast<ReportTraceInfo?>(),
      account: result[3] as String?,
    );
  }
}

class ReportGetCardStatusRsp {
  ReportGetCardStatusRsp({
    this.responseCode,
    this.responseMessage,
    this.cardType,
    this.account,
    this.accountInformation,
  });

  String? responseCode;

  String? responseMessage;

  String? cardType;

  String? account;

  ReportAccountRsp? accountInformation;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      cardType,
      account,
      accountInformation?.encode(),
    ];
  }

  static ReportGetCardStatusRsp decode(Object result) {
    result as List<Object?>;
    return ReportGetCardStatusRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      cardType: result[2] as String?,
      account: result[3] as String?,
      accountInformation: result[4] != null
          ? ReportAccountRsp.decode(result[4]! as List<Object?>)
          : null,
    );
  }
}

class ReportGetTransactionInfoRsp {
  ReportGetTransactionInfoRsp({
    this.responseCode,
    this.responseMessage,
    this.status,
    this.hostData,
    this.hostReferenceNumber,
    this.timeStamp,
  });

  String? responseCode;

  String? responseMessage;

  String? status;

  String? hostData;

  String? hostReferenceNumber;

  String? timeStamp;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      status,
      hostData,
      hostReferenceNumber,
      timeStamp,
    ];
  }

  static ReportGetTransactionInfoRsp decode(Object result) {
    result as List<Object?>;
    return ReportGetTransactionInfoRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      status: result[2] as String?,
      hostData: result[3] as String?,
      hostReferenceNumber: result[4] as String?,
      timeStamp: result[5] as String?,
    );
  }
}

class _POSLinkReportApiCodec extends StandardMessageCodec {
  const _POSLinkReportApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ReportAccountRsp) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetCardInfoReq) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetCardInfoRsp) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetCardStatusReq) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetCardStatusRsp) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetTraceInfoByCardReq) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetTraceInfoByCardRsp) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetTransactionInfoReq) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ReportGetTransactionInfoRsp) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ReportTraceInfo) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ReportAccountRsp.decode(readValue(buffer)!);
      case 129: 
        return ReportGetCardInfoReq.decode(readValue(buffer)!);
      case 130: 
        return ReportGetCardInfoRsp.decode(readValue(buffer)!);
      case 131: 
        return ReportGetCardStatusReq.decode(readValue(buffer)!);
      case 132: 
        return ReportGetCardStatusRsp.decode(readValue(buffer)!);
      case 133: 
        return ReportGetTraceInfoByCardReq.decode(readValue(buffer)!);
      case 134: 
        return ReportGetTraceInfoByCardRsp.decode(readValue(buffer)!);
      case 135: 
        return ReportGetTransactionInfoReq.decode(readValue(buffer)!);
      case 136: 
        return ReportGetTransactionInfoRsp.decode(readValue(buffer)!);
      case 137: 
        return ReportTraceInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkReportApi {
  /// Constructor for [POSLinkReportApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkReportApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkReportApiCodec();

  Future<ReportGetCardInfoRsp> getCardInfo(ReportGetCardInfoReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkReportApi.getCardInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReportGetCardInfoRsp?)!;
    }
  }

  Future<ReportGetTraceInfoByCardRsp> getTraceInfoByCard(ReportGetTraceInfoByCardReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkReportApi.getTraceInfoByCard', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReportGetTraceInfoByCardRsp?)!;
    }
  }

  Future<ReportGetCardStatusRsp> getCardStatus(ReportGetCardStatusReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkReportApi.getCardStatus', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReportGetCardStatusRsp?)!;
    }
  }

  Future<ReportGetTransactionInfoRsp> getTransactionInfo(ReportGetTransactionInfoReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkReportApi.getTransactionInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReportGetTransactionInfoRsp?)!;
    }
  }
}
