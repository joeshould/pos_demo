// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class FormInputTextReq {
  FormInputTextReq({
    this.title,
    this.prompt,
    this.inputType,
    this.timeout,
    this.minLength,
    this.maxLength,
  });

  String? title;

  String? prompt;

  String? inputType;

  String? timeout;

  String? minLength;

  String? maxLength;

  Object encode() {
    return <Object?>[
      title,
      prompt,
      inputType,
      timeout,
      minLength,
      maxLength,
    ];
  }

  static FormInputTextReq decode(Object result) {
    result as List<Object?>;
    return FormInputTextReq(
      title: result[0] as String?,
      prompt: result[1] as String?,
      inputType: result[2] as String?,
      timeout: result[3] as String?,
      minLength: result[4] as String?,
      maxLength: result[5] as String?,
    );
  }
}

class FormInputTextRsp {
  FormInputTextRsp({
    this.responseCode,
    this.responseMessage,
    this.inputText,
  });

  String? responseCode;

  String? responseMessage;

  String? inputText;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      inputText,
    ];
  }

  static FormInputTextRsp decode(Object result) {
    result as List<Object?>;
    return FormInputTextRsp(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      inputText: result[2] as String?,
    );
  }
}

class _POSLinkFormApiCodec extends StandardMessageCodec {
  const _POSLinkFormApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FormInputTextReq) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FormInputTextRsp) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FormInputTextReq.decode(readValue(buffer)!);
      case 129: 
        return FormInputTextRsp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkFormApi {
  /// Constructor for [POSLinkFormApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkFormApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkFormApiCodec();

  Future<FormInputTextRsp> inputText(FormInputTextReq arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.poslink2.POSLinkFormApi.inputText', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormInputTextRsp?)!;
    }
  }
}
